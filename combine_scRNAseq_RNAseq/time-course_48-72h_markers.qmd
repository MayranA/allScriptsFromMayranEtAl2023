---
title: "Correlation bulk RNA-seq"
author: "Alexandre Mayran"
format: html
editor: visual
---

```{r, setup, include=FALSE}
# choose working directory
wd <- "/data/home/ldelisle/tempAllScriptsFromMayranEtAl2023"
knitr::opts_knit$set(root.dir = wd)
```

# Analysing temporal dynamic of gastruloid cell diversification

## Parameters

```{r}
samplesPlan <- "RNAseq/samples.plan.time.course.txt"
tableWithNormalizedExpression <- "output.files/RNAseq/mergedTables/time_course/AllCufflinks_Simplified.txt.gz"
File.gene.rank <- "output.files/scRNAseq/matrices_to_plots/WT/all.markers.WT.csv"
top.gene <- 10
scRNAseqParam.file.path <- "scRNAseq/matrices_to_plots/scRNAseqWTparams.R"

color.cells <- colorRampPalette(c(
    "#053061",
    "#6bacd0",
    "#f7f7f7",
    "#e58268",
    "#67001f"
))(103)

output.dir <- "output.files/combine_scRNAseq_RNAseq/time-course_48-72h_markers"
```

## Dependencies

```{r}
# Install required packages
if (!"devtools" %in% installed.packages()) {
    install.packages("devtools", repos = "https://stat.ethz.ch/CRAN/")
}
if (!"usefulLDfunctions" %in% installed.packages()) {
    devtools::install_github("lldelisle/usefulLDfunctions")
}
library(usefulLDfunctions)
safelyLoadAPackageInCRANorBioconductor("dplyr")
safelyLoadAPackageInCRANorBioconductor("pheatmap")
safelyLoadAPackageInCRANorBioconductor("scales")

source(scRNAseqParam.file.path)
```

## Process inputs

```{r}
## Process samples plan
samples.plan.df <- read.delim(samplesPlan)
rownames(samples.plan.df) <- samples.plan.df$sample
samples.plan.df$Time <- sapply(strsplit(samples.plan.df$sample, "_"), head, n = 1)
samples.plan.df$Time <- factor(samples.plan.df$Time, levels = paste0(sort(as.numeric(gsub("h", "", unique(samples.plan.df$Time)))), "h"))
samples.plan.df$replicate <- sapply(strsplit(samples.plan.df$sample, "_"), tail, n = 1)

annot <- samples.plan.df[, c("Time", "replicate")]
# to add color to time:
fixedColors <- list(Time = colorRampPalette(c("yellow", "orange", "red"))(length(unique(samples.plan.df$Time))))
names(fixedColors$Time) <- sort(unique(samples.plan.df$Time))

## Process FPKM file
expressionDF <- read.delim(tableWithNormalizedExpression)
colnames(expressionDF) <- gsub("^FPKM_", "", colnames(expressionDF))
data <- expressionDF[, samples.plan.df$sample]
sumperline <- apply(data, 1, sum)
nonZdata <- data[sumperline != 0, ]
gene_short_names <- expressionDF$gene_short_name[sumperline != 0]
ldata <- log2(nonZdata + 1)

## Process markers
# we select the desired clusters first
gene.rank <- read.csv(File.gene.rank)
topn.time <- as.data.frame(gene.rank %>% group_by(cluster) %>% top_n(n = top.gene, wt = avg_log2FC))
cluster.name <- unique(gene.rank$cluster)
cluster.order <- cluster.name[c(1:8, 13:16)]

topn.time <- subset(topn.time, subset = topn.time$cluster %in% cluster.order)
topn.time$cluster <- factor(topn.time$cluster, levels = cluster.order)
topn.time <- topn.time[order(topn.time$cluster), ]

rownames(topn.time) <- make.unique(topn.time$gene)

## Create output.dir
dir.create(output.dir, showWarnings = FALSE, recursive = TRUE)
```

## Here we will generate correlation plot using top 2000 most variant genes

```{r}
rldata <- ldata[order(apply(ldata, 1, var), decreasing = T)[1:min(nrow(ldata), 2000.)], ]

correlationMatrix <- cor(rldata, method = "spearman")
newSampleDist <- as.dist(1 - correlationMatrix)
clu <- hclust(newSampleDist, method = "ward.D2")
dd <- as.dendrogram(clu)
clu2 <- reorder(dd, 1:nrow(correlationMatrix), agglo.FUN = min)

pheatmap(
    correlationMatrix,
    cellwidth = 10,
    cellheight = 10,
    annotation = annot,
    annotation_colors = fixedColors,
    main = "spearmanCor - ward clustering",
    cluster_rows = as.hclust(clu2),
    cluster_cols = as.hclust(clu2),
    col = color.cells,
    filename = file.path(output.dir, "CorrelationMatrix_SpearWard.2000variable.genes.pdf"),
    width = 10, height = 6
)
```

## Here we display the expression of markers from scRNAseq on our time resolved transcriptomic Atlas

```{r}
# Now we will do heatmap of markers from single cell
epsilon <- 0.0000001
# Get only data for marker genes
df.sub <- ldata[match(
    topn.time$gene,
    gene_short_names
), ]
df.sub.scale <- as.data.frame(t(apply(df.sub, 1, scale)))

rownames(df.sub.scale) <- rownames(topn.time)
colnames(df.sub.scale) <- colnames(df.sub)
correlation.matrix <- cor(df.sub.scale)
sample.dist <- as.dist(1 - correlation.matrix)
clu <- hclust(sample.dist, method = "ward.D2")
dd <- as.dendrogram(clu)
clu2 <- reorder(dd, 1:nrow(correlation.matrix), agglo.FUN = min)
fixedColors[["cluster"]] <- my.fate.colors[intersect(names(my.fate.colors), unique(as.character(topn.time$cluster)))]
annR <- subset(topn.time, select = "cluster")
breaksListAbs <- c(
    min(df.sub.scale, -4) - epsilon,
    seq(-4, 4, length.out = 100),
    max(df.sub.scale, 4) + epsilon
)
pheatmap(df.sub.scale,
    labels_row = topn.time$gene,
    cluster_rows = FALSE,
    cluster_cols = as.hclust(clu2),
    annotation_col = annot,
    annotation_row = annR,
    annotation_colors = fixedColors,
    breaks = breaksListAbs,
    main = "Z-Score",
    color = color.cells,
    filename = file.path(output.dir, paste0("HeatmapWithGenes", top.gene, "genes.Pearson.wide.pdf")),
    height = (top.gene * 1.3 + 6),
    width = 10
)
```


Write sessionInfo to file:

```{r}
writeLines(capture.output(sessionInfo()), "combine_scRNAseq_RNAseq/sessionInfo_corr_time-course.txt")
```
